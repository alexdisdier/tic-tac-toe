{"version":3,"sources":["components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["header","props","react_default","a","createElement","className","player","App","state","grid","row","col","turn","symbolPlayer1","symbolPlayer2","turnPlayer1","turnPlayer2","winner","checkRow","row1","join","row2","row3","checkCol","col1","col2","col3","checkDiagonal","diagonalLeft","diagonalRight","play","newGrid","Object","toConsumableArray","_this","i","length","j","setState","reset","_this2","this","id","role","aria-label","Header_Header","map","e","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.830016c1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nconst header = props => {\n  return (\n    <header>\n      <div className=\"wrapper\">\n        {/* <p>Select Player One:</p> */}\n        <p>Tic Tac Toe</p>\n        <span className=\"turn\">\n          {props.player === 0 ? \"Next Player: X\" : \"Next Player: O\"}\n        </span>\n        {/* <div className=\"flex-radio\">\n          <div>\n            <input type=\"radio\" id=\"zero\" name=\"tic-tac\" value=\"zero\" />\n            <label htmlFor=\"zero\">O</label>\n          </div>\n\n          <div>\n            <input type=\"radio\" id=\"cross\" name=\"tic-tac\" value=\"cross\" />\n            <label htmlFor=\"cross\">X</label>\n          </div>\n        </div> */}\n      </div>\n    </header>\n  );\n};\n\nexport default header;\n","import React, { Component } from \"react\";\nimport \"./assets/css/reset.css\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\n\nclass App extends Component {\n  state = {\n    grid: [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]],\n    row: null,\n    col: null,\n    turn: 0,\n    symbolPlayer1: \"X\",\n    symbolPlayer2: \"O\",\n    turnPlayer1: 0,\n    turnPlayer2: 0,\n    winner: \"\"\n  };\n\n  checkRow = grid => {\n    const row1 = grid[0].join(\"\");\n    const row2 = grid[1].join(\"\");\n    const row3 = grid[2].join(\"\");\n\n    if (row1 === \"XXX\" || row2 === \"XXX\" || row3 === \"XXX\") {\n      return \"X\";\n    } else if (row1 === \"OOO\" || row2 === \"OOO\" || row3 === \"XXX\") {\n      return \"O\";\n    }\n  };\n\n  checkCol = grid => {\n    const col1 = grid[0][0] + grid[1][0] + grid[2][0];\n    const col2 = grid[0][1] + grid[1][1] + grid[2][1];\n    const col3 = grid[0][2] + grid[1][2] + grid[2][2];\n\n    if (col1 === \"XXX\" || col2 === \"XXX\" || col3 === \"XXX\") {\n      return \"X\";\n    } else if (col1 === \"OOO\" || col2 === \"OOO\" || col3 === \"OOO\") {\n      return \"O\";\n    }\n  };\n\n  checkDiagonal = grid => {\n    const diagonalLeft = grid[0][0] + grid[1][1] + grid[2][2];\n    const diagonalRight = grid[0][2] + grid[1][1] + grid[2][0];\n\n    if (diagonalRight === \"XXX\" || diagonalLeft === \"XXX\") {\n      return \"X\";\n    } else if (diagonalRight === \"OOO\" || diagonalLeft === \"OOO\") {\n      return \"O\";\n    }\n  };\n\n  play = (row, col) => {\n    const newGrid = [...this.state.grid];\n    const symbolPlayer1 = this.state.symbolPlayer1;\n    const symbolPlayer2 = this.state.symbolPlayer2;\n    let turn = this.state.turn;\n    let turnPlayer1 = this.state.turnPlayer1;\n    let turnPlayer2 = this.state.turnPlayer2;\n    let winner = this.state.winner;\n\n    for (let i = 0; i < newGrid.length; i++) {\n      if (i === row) {\n        for (let j = 0; j < newGrid[i].length; j++) {\n          if (j === col && newGrid[i][j] === \"\") {\n            if (turn === 0) {\n              newGrid[i][j] = symbolPlayer1;\n              turnPlayer1++;\n              turn = 1;\n            } else {\n              newGrid[i][j] = symbolPlayer2;\n              turnPlayer2++;\n              turn = 0;\n            }\n          }\n        }\n      }\n    }\n\n    if (\n      this.checkRow(newGrid) === \"X\" ||\n      this.checkCol(newGrid) === \"X\" ||\n      this.checkDiagonal(newGrid) === \"X\"\n    ) {\n      winner = \"X\";\n    } else if (\n      this.checkRow(newGrid) === \"O\" ||\n      this.checkCol(newGrid) === \"O\" ||\n      this.checkDiagonal(newGrid) === \"O\"\n    ) {\n      winner = \"O\";\n    } else if (turnPlayer1 + turnPlayer2 === 9) {\n      winner = \"Draw\";\n    }\n\n    this.setState({\n      turnPlayer1: turnPlayer1,\n      turnPlayer2: turnPlayer2,\n      turn: turn,\n      grid: newGrid,\n      winner: winner\n    });\n  };\n\n  reset = () => {\n    this.setState({\n      grid: [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]],\n      row: null,\n      col: null,\n      turn: 0,\n      symbolPlayer1: \"X\",\n      symbolPlayer2: \"O\",\n      turnPlayer1: 0,\n      turnPlayer2: 0,\n      winner: \"\"\n    });\n  };\n\n  render() {\n    let winner = \"\";\n    if (this.state.winner !== \"\" && this.state.winner !== \"Draw\") {\n      winner = (\n        <span id=\"result\">\n          <span>{this.state.winner}</span>WINNER !\n        </span>\n      );\n    } else if (this.state.winner !== \"\" && this.state.winner === \"Draw\") {\n      winner = (\n        <span id=\"result\">\n          <span>\n            {this.state.winner}{\" \"}\n            <span className=\"emoji\" role=\"img\" aria-label=\"smily face\">\n              ðŸ˜€\n            </span>\n          </span>\n        </span>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <Header player={this.state.turn} />\n        <div className=\"game\">\n          <div className=\"grid\">\n            {winner}\n            <table className={winner !== \"\" ? \"game-over\" : \"\"}>\n              <tbody>\n                {this.state.grid.map((e, row) => (\n                  <tr key={row}>\n                    {e.map((i, col) => (\n                      <td key={col} onClick={() => this.play(row, col)}>\n                        {i}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n        <button onClick={this.reset}>restart game</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}